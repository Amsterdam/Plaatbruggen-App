---
description: 
globs: 
alwaysApply: true
---
# VIKTOR SDK Usage Guidelines

This rule provides guidelines and quick references for using the VIKTOR SDK within this project.

## Core Principle

*   The VIKTOR SDK **must only** be imported and used within the `viktor/` directory and its submodules.
*   The `src/` directory **must remain** independent of the VIKTOR SDK.

## Key SDK Modules & Documentation

When working within the `viktor/` layer, refer to the official VIKTOR documentation for detailed API information:

**IMPORTANT:** Always consult the relevant documentation link below *before* implementing or modifying code that uses a specific VIKTOR SDK component to ensure correct usage and parameterization.

### User Interface & Interaction

*   **Parametrization (`viktor.parametrization`)**: Defines the user interface (input fields, pages, tabs, buttons).
    *   Use classes like `Page`, `Tab`, `TextField`, `NumberField`, `OptionField`, `ActionButton`, `DownloadButton`, `ChildEntityManager`, etc.
    *   Documentation: [https://docs.viktor.ai/sdk/api/parametrization/](mdc:https:/docs.viktor.ai/sdk/api/parametrization)

*   **Views (`viktor.views`)**: Defines how data and results are presented to the user.
    *   Use classes like `GeometryView`, `PlotlyView`, `DataView`, `MapView`, `PDFView`, etc.
    *   Decorate controller methods with the corresponding view decorator (e.g., `@GeometryView(...)`).
    *   Documentation: [https://docs.viktor.ai/sdk/api/views/](mdc:https:/docs.viktor.ai/sdk/api/views) 

*   **Controller (`viktor.core.ViktorController`)**: The central class connecting parametrization, views, and logic.
    *   Defines methods called by `ActionButton`, `DownloadButton`, and view decorators.
    *   Manages interaction between the VIKTOR layer (`viktor/`) and the core logic layer (`src/`).
    *   Main Documentation: [https://docs.viktor.ai/sdk/api/core/](mdc:https:/docs.viktor.ai/sdk/api/core)

### Data & Results

*   **Result Objects (`viktor.result`)**: Defines the structure for results returned by download or analysis methods.
    *   Use classes like `DownloadResult`, `OptimizationResult`, etc.
    *   Documentation: [https://docs.viktor.ai/sdk/api/result/](mdc:https:/docs.viktor.ai/sdk/api/result)

*   **Geometry (`viktor.geometry`)**: Classes for creating and manipulating 3D geometry objects (Points, Lines, Polygons, Extrusions, etc.).
    *   Used for generating visualizations in `GeometryView` or preparing data for external tools.
    *   Documentation: [https://docs.viktor.ai/sdk/api/geometry/](mdc:https:/docs.viktor.ai/sdk/api/geometry)

*   **Core Utilities (`viktor.core`)**: Fundamental classes like `File`, `Color`, `Storage`, `UserMessage`.
    *   Documentation: [https://docs.viktor.ai/sdk/api/core/](mdc:https:/docs.viktor.ai/sdk/api/core)

### External Integrations (`viktor.external`)

*   Modules for interacting with external software.
*   **SCIA Engineer (`viktor.external.scia`)**: Specific classes and methods (`Model`, `SciaAnalysis`, etc.) for generating SCIA input (XML), running analyses, and parsing results.
    *   Documentation: [https://docs.viktor.ai/sdk/api/external/scia/](mdc:https:/docs.viktor.ai/sdk/api/external/scia)
*   **Word (`viktor.external.word`)**: For generating reports using Word templates (`render_word_file`, `WordFileTag`, `WordFileImage`).
    *   Documentation: [https://docs.viktor.ai/sdk/api/external/word/](mdc:https:/docs.viktor.ai/sdk/api/external/word)
*   **IDEA StatiCa Concrete (`viktor.external.idea`)**: For interacting with IDEA StatiCa RCS.
    *   Documentation: [https://docs.viktor.ai/sdk/api/external/idea/](mdc:https:/docs.viktor.ai/sdk/api/external/idea)
*   **Generic (`viktor.external.generic`)**: For running generic external command-line programs (`GenericAnalysis`).
    *   Documentation: [https://docs.viktor.ai/sdk/api/external/generic/](mdc:https:/docs.viktor.ai/sdk/api/external/generic)
*   *(Check documentation for other specific software integrations if needed)*

### Development & Utilities

*   **Testing (`viktor.testing`)**: Utilities for testing VIKTOR applications.
    *   Provides tools to mock VIKTOR components and simulate parametrization.
    *   Documentation: [https://docs.viktor.ai/sdk/api/testing/](mdc:https:/docs.viktor.ai/sdk/api/testing)

*   **Errors (`viktor.errors`)**: Custom VIKTOR exception types.
    *   Use `UserError` to show user-friendly error messages in the interface, `InternalError` for other exceptions.
    *   Documentation: [https://docs.viktor.ai/sdk/api/errors/](mdc:https:/docs.viktor.ai/sdk/api/errors)

*   **Utilities (`viktor.utils`)**: Helper functions for common tasks.
    *   Includes functions like `memoize`, `convert_word_to_pdf`, `merge_pdf_files`, `render_jinja_template`, etc.
    *   Documentation: [https://docs.viktor.ai/sdk/api/utils/](mdc:https:/docs.viktor.ai/sdk/api/utils)

### General References

*   **Top-Level API Reference**: Overview of all available modules.
    *   Documentation: [https://docs.viktor.ai/sdk/api/api-v1/](mdc:https:/docs.viktor.ai/sdk/api/api-v1)

*   **Changelog**: Check for recent SDK updates, new features, or deprecations.
    *   Documentation: [https://docs.viktor.ai/sdk/changelog/](mdc:https:/docs.viktor.ai/sdk/changelog)

## Finding Data

*   User input is accessed via the `params` object passed to controller methods (e.g., `params.my_page.my_field`).
*   Data from the core logic layer (`src/`) should be retrieved by calling functions/methods in `src/` from within the `viktor/` controller methods.
*   Results for views are returned by the corresponding view methods in the controller.










/Generate Cursor Rules should we add this to a cursor rules?




