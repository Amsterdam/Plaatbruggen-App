---
description: 
globs: 
alwaysApply: true
---
# Python Coding Standards

This project adheres to the following Python coding standards and conventions:

## Style Guide

*   Code **must** follow the [PEP 8](mdc:https:/peps.python.org/pep-0008) style guide.
*   Style adherence is enforced using **Ruff**. Configuration can be found in [automatisch-toetsmodel-plaatbruggen/.ruff.toml](mdc:automatisch-toetsmodel-plaatbruggen/.ruff.toml).
*   Use **double quotes (`"`)** for strings (Ruff rule `Q000`). Single quotes are disallowed.
*   Ensure imports are sorted (Ruff rule `I001`). Ruff can automatically fix this.
*   Avoid commented-out code (Ruff rule `ERA001`). Remove it instead.

## Docstrings

*   All public modules, classes, functions, and methods **must** have docstrings.
*   Docstrings **must** follow the reStructuredText (reST) format, including parameter descriptions (`:param:`), types (`:type:`), return values (`:returns:`, `:rtype:`), and exceptions raised (`:raises:`).
*   Multi-line docstring summaries should start on the second line (Ruff rule `D213`).

## Type Hinting

*   All function and method signatures (parameters and return types) **must** include type hints.
*   Variables should have type hints where it enhances clarity.
*   Type checking is enforced using **Mypy** (although installation/configuration might be needed). Basic annotation checks are also done by Ruff (`ANN` codes).
*   Aim for clear and understandable type hints. Use modern types (e.g., `list` instead of `typing.List`).
*   Unused function/method arguments (e.g., in placeholders) should be prefixed with an underscore (`_`) to satisfy linters (Ruff rule `ARG001`/`ARG002`). Update the name and docstring when the argument is used.

## Project Structure & Imports

*   Use `__init__.py` files (even if empty) to create explicit packages. Implicit namespace packages are discouraged (Ruff rule `INP001`).
*   Unused imports (`F401`) are generally disallowed, **except** in `app/**/__init__.py` files where they are explicitly ignored via `.ruff.toml` configuration. This allows importing controllers/symbols to define the package structure or make them easily accessible.

## General

*   Comments should be clear, concise, and explain the *why* behind non-obvious code, not just *what* the code does.




